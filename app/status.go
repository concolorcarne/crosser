package app

import (
	"errors"
	"fmt"
)

type Status int

const (
	STATUS_OK Status = iota
	STATUS_CANCELLED
	STATUS_UNKNOWN
	STATUS_INVALID_ARGUMENT
	STATUS_DEADLINE_EXCEEDED
	STATUS_NOT_FOUND
	STATUS_ALREADY_EXISTS
	STATUS_PERMISSION_DENIED
	STATUS_RESOURCE_EXHAUSTED
	STATUS_FAILED_PRECONDITION
	STATUS_ABORTED
	STATUS_OUT_OF_RANGE
	STATUS_UNIMPLEMENTED
	STATUS_INTERNAL
	STATUS_UNAVAILABLE
	STATUS_DATA_LOSS
	STATUS_UNAUTHENTICATED
)

var AllStatus = []Status{
	STATUS_OK,
	STATUS_CANCELLED,
	STATUS_UNKNOWN,
	STATUS_INVALID_ARGUMENT,
	STATUS_DEADLINE_EXCEEDED,
	STATUS_NOT_FOUND,
	STATUS_ALREADY_EXISTS,
	STATUS_PERMISSION_DENIED,
	STATUS_RESOURCE_EXHAUSTED,
	STATUS_FAILED_PRECONDITION,
	STATUS_ABORTED,
	STATUS_OUT_OF_RANGE,
	STATUS_UNIMPLEMENTED,
	STATUS_INTERNAL,
	STATUS_UNAVAILABLE,
	STATUS_DATA_LOSS,
	STATUS_UNAUTHENTICATED,
}

func (s Status) TSName() string {
	switch s {
	case STATUS_OK:
		return "STATUS_OK"
	case STATUS_CANCELLED:
		return "STATUS_CANCELLED"
	case STATUS_UNKNOWN:
		return "STATUS_UNKNOWN"
	case STATUS_INVALID_ARGUMENT:
		return "STATUS_INVALID_ARGUMENT"
	case STATUS_DEADLINE_EXCEEDED:
		return "STATUS_DEADLINE_EXCEEDED"
	case STATUS_NOT_FOUND:
		return "STATUS_NOT_FOUND"
	case STATUS_ALREADY_EXISTS:
		return "STATUS_ALREADY_EXISTS"
	case STATUS_PERMISSION_DENIED:
		return "STATUS_PERMISSION_DENIED"
	case STATUS_RESOURCE_EXHAUSTED:
		return "STATUS_RESOURCE_EXHAUSTED"
	case STATUS_FAILED_PRECONDITION:
		return "STATUS_FAILED_PRECONDITION"
	case STATUS_ABORTED:
		return "STATUS_ABORTED"
	case STATUS_OUT_OF_RANGE:
		return "STATUS_OUT_OF_RANGE"
	case STATUS_UNIMPLEMENTED:
		return "STATUS_UNIMPLEMENTED"
	case STATUS_INTERNAL:
		return "STATUS_INTERNAL"
	case STATUS_UNAVAILABLE:
		return "STATUS_UNAVAILABLE"
	case STATUS_DATA_LOSS:
		return "STATUS_DATA_LOSS"
	case STATUS_UNAUTHENTICATED:
		return "STATUS_UNAUTHENTICATED"
	default:
		return "STATUS_UNSET"
	}
}

func NewError(s Status, msg string) error {
	errorString := fmt.Sprintf("%s: %s", s.TSName(), msg)
	return errors.New(errorString)
}
